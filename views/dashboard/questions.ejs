<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Questions - <%= subjectData.subjectName %>
    </title>
    <link rel="stylesheet" href="/css/dashboard.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>

<body class="dashboard-body">
    <div class="dashboard-container">
        <%- include('partials/sidebar', { currentPage: 'questions' }) %>

            <main class="dashboard-main">
                <div class="content-header">
                    <div class="header-breadcrumb">
                        <h1>
                            <%= examData.examName %> / <%= subjectData.subjectName %>
                        </h1>
                    </div>
                    <div class="header-actions">
                        <button class="upload-button" onclick="openUploadModal()">
                            <i class="fas fa-file-excel"></i> Upload Excel
                        </button>
                        <button class="add-button" onclick="openAddQuestionModal()">
                            <i class="fas fa-plus"></i> Add Question
                        </button>
                    </div>
                </div>
                <!-- Questions List -->
                <div class="questions-list">
                    <% if (questions && questions.length> 0) { %>
                        <% questions.forEach((question, index)=> { %>
                            <div class="question-card">
                                <div class="question-number">#<%= index + 1 %>
                                </div>
                                <div class="question-content">
                                    <h3>
                                        <%= question.question %>
                                    </h3>
                                    <div class="options-list">
                                        <% if (question.options && Array.isArray(question.options)) { %>
                                            <% question.options.forEach(option=> { %>
                                                <div
                                                    class="option <%= option.optionId === question.correctOption ? 'correct' : '' %>">
                                                    <span class="option-label">
                                                        <%= option.optionId.toUpperCase() %>)
                                                    </span>
                                                    <%= option.text %>
                                                </div>
                                                <% }); %>
                                                    <% } %>
                                    </div>
                                    <div class="question-explanation">
                                        <strong>Explanation:</strong>
                                        <%= question.explanation %>
                                    </div>
                                </div>
                                <div class="question-actions">
                                    <button class="action-button" onclick="editQuestion(<%= index %>)">
                                        <i class="fas fa-edit"></i> Edit
                                    </button>
                                    <button class="action-button delete"
                                        onclick="deleteQuestion('<%= examData.examId %>', '<%= subjectData.subjectId %>', '<%= question.questionId %>')">
                                        <i class="fas fa-trash"></i> Delete
                                    </button>
                                </div>
                            </div>
                            <% }); %>
                                <% } else { %>
                                    <div class="no-questions">No questions found</div>
                                    <% } %>
                </div>
            </main>
    </div>

    <!-- Add/Edit Question Modal -->
    <div id="questionModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Add New Question</h2>
                <button class="close-button" onclick="closeQuestionModal()">×</button>
            </div>
            <form id="questionForm" onsubmit="handleQuestionSubmit(event)">
                <div class="form-group">
                    <label for="questionText">Question</label>
                    <textarea id="questionText" name="questionText" required rows="3"></textarea>
                </div>
                <div class="options-container">
                    <div class="form-group">
                        <label for="optionA">Option A</label>
                        <input type="text" id="optionA" name="optionA" required>
                    </div>
                    <div class="form-group">
                        <label for="optionB">Option B</label>
                        <input type="text" id="optionB" name="optionB" required>
                    </div>
                    <div class="form-group">
                        <label for="optionC">Option C</label>
                        <input type="text" id="optionC" name="optionC" required>
                    </div>
                    <div class="form-group">
                        <label for="optionD">Option D</label>
                        <input type="text" id="optionD" name="optionD" required>
                    </div>
                </div>
                <div class="form-group">
                    <label for="correctOption">Correct Option</label>
                    <select id="correctOption" name="correctOption" required>
                        <option value="a">Option A</option>
                        <option value="b">Option B</option>
                        <option value="c">Option C</option>
                        <option value="d">Option D</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="explanation">Explanation</label>
                    <textarea id="explanation" name="explanation" required rows="3"></textarea>
                </div>
                <div class="form-actions">
                    <button type="button" class="cancel-button" onclick="closeQuestionModal()">Cancel</button>
                    <button type="submit" class="submit-button">Save Question</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Upload Modal -->
    <div id="uploadModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Upload Questions from Excel</h2>
                <button class="close-button" onclick="closeUploadModal()">×</button>
            </div>
            <div class="modal-body">
                <div class="upload-info">
                    <p>Please ensure your Excel file has the following columns:</p>
                    <ul>
                        <li>Question</li>
                        <li>Option A</li>
                        <li>Option B</li>
                        <li>Option C</li>
                        <li>Option D</li>
                        <li>Correct Option (use a, b, c, or d)</li>
                        <li>Explanation</li>
                    </ul>
                    <a href="/templates/question_template.xlsx" class="download-template" download>
                        <i class="fas fa-download"></i> Download Template
                    </a>
                </div>
                <form id="uploadForm" onsubmit="handleFileUpload(event)">
                    <div class="form-group">
                        <label for="excelFile">Select Excel File</label>
                        <input type="file" id="excelFile" accept=".xlsx, .xls" required>
                    </div>
                    <div class="form-actions">
                        <button type="button" class="cancel-button" onclick="closeUploadModal()">Cancel</button>
                        <button type="submit" class="submit-button">Upload</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

   <!-- questions.ejs -->
<script>
    let isEditing = false;
    let editingQuestionId = null;
    
    function openAddQuestionModal() {
        const modal = document.getElementById('questionModal');
        document.getElementById('questionForm').reset();
        modal.querySelector('.modal-header h2').textContent = 'Add New Question';
        modal.style.display = 'flex';
        isEditing = false;
        editingQuestionId = null;
    }
    
    function closeQuestionModal() {
        document.getElementById('questionModal').style.display = 'none';
        document.getElementById('questionForm').reset();
        isEditing = false;
        editingQuestionId = null;
    }
    
    function editQuestion(index) {
        const questions = <%- JSON.stringify(questions) %>;
        const questionData = questions[index];
    
        document.getElementById('questionText').value = questionData.question;
        document.getElementById('optionA').value = questionData.options[0].text;
        document.getElementById('optionB').value = questionData.options[1].text;
        document.getElementById('optionC').value = questionData.options[2].text;
        document.getElementById('optionD').value = questionData.options[3].text;
        document.getElementById('correctOption').value = questionData.correctOption;
        document.getElementById('explanation').value = questionData.explanation;
    
        isEditing = true;
        editingQuestionId = questionData.questionId;
    
        const modal = document.getElementById('questionModal');
        modal.querySelector('.modal-header h2').textContent = 'Edit Question';
        modal.style.display = 'flex';
    }
    
    async function handleQuestionSubmit(event) {
        event.preventDefault();
        const formData = {
            question: document.getElementById('questionText').value,
            options: [
                { optionId: 'a', text: document.getElementById('optionA').value },
                { optionId: 'b', text: document.getElementById('optionB').value },
                { optionId: 'c', text: document.getElementById('optionC').value },
                { optionId: 'd', text: document.getElementById('optionD').value }
            ],
            correctOption: document.getElementById('correctOption').value,
            explanation: document.getElementById('explanation').value
        };
    
        try {
            const url = isEditing 
                ? `/api/questions/<%= examData.examId %>/<%= subjectData.subjectId %>/${editingQuestionId}`
                : `/api/questions/<%= examData.examId %>/<%= subjectData.subjectId %>/<%= paperId %>`;
    
            const response = await fetch(url, {
                method: isEditing ? 'PUT' : 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });
    
            if (!response.ok) {
                const data = await response.json();
                throw new Error(data.error || 'Failed to save question');
            }
    
            window.location.reload();
        } catch (error) {
            console.error('Error:', error);
            alert(error.message);
        }
    }
    
    async function deleteQuestion(examId, subjectId, questionId) {
        if (!confirm('Are you sure you want to delete this question?')) return;
    
        try {
            const response = await fetch(`/api/questions/${examId}/${subjectId}/${questionId}`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' }
            });
    
            if (!response.ok) {
                const data = await response.json();
                throw new Error(data.error || 'Failed to delete question');
            }
    
            window.location.reload();
        } catch (error) {
            console.error('Error:', error);
            alert('Failed to delete question: ' + error.message);
        }
    }
    
    function openUploadModal() {
        document.getElementById('uploadModal').style.display = 'flex';
    }
    
    function closeUploadModal() {
        document.getElementById('uploadModal').style.display = 'none';
        document.getElementById('uploadForm').reset();
    }
    
    async function handleFileUpload(event) {
        event.preventDefault();
        const fileInput = document.getElementById('excelFile');
        const file = fileInput.files[0];
        
        if (!file) {
            alert('Please select a file');
            return;
        }
    
        const formData = new FormData();
        formData.append('file', file);
    
        try {
            const response = await fetch(
                `/api/questions/<%= examData.examId %>/<%= subjectData.subjectId %>/<%= paperId %>/upload`, 
                {
                    method: 'POST',
                    body: formData
                }
            );
    
            const result = await response.json();
            if (!response.ok) throw new Error(result.error || 'Upload failed');
    
            alert(`Successfully uploaded ${result.count} questions`);
            window.location.reload();
        } catch (error) {
            console.error('Error:', error);
            alert('Upload failed: ' + error.message);
        }
    }
    </script>
</body>

</html>